pipeline {
    agent {
        label 'aws-slave'
    }

    tools {
        git 'linux-git'
    }

    environment {
        AWS_REGION = 'us-east-1'
        APP_DIR = 'journalapp'
        TERRAFORM_DIR = 'terraform'
        ECR_REPO_URI = '471112618663.dkr.ecr.us-east-1.amazonaws.com/springboot-app-repo'
        PUBLIC_IP = ''
        BACKEND_PRIVATE_IP = ''
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir(env.APP_DIR) {
                    sh 'chmod +x mvnw && ./mvnw clean package -DskipTests'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                withCredentials([[ 
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds-backup',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        sh """
                            aws ecr get-login-password --region ${env.AWS_REGION} | \
                            docker login --username AWS --password-stdin ${env.ECR_REPO_URI.split('/')[0]}
                        """
                        dir(env.APP_DIR) {
                            sh """
                                docker build \
                                    -t ${env.ECR_REPO_URI}:${BUILD_NUMBER} .
                            """
                        }
                        sh "docker push ${env.ECR_REPO_URI}:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([[ 
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds-backup',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    dir(env.TERRAFORM_DIR) {
                        sh 'terraform init -upgrade -input=false'
                        sh """
                            terraform apply -auto-approve \
                                -var="docker_image=${env.ECR_REPO_URI}:${BUILD_NUMBER}" \
                                -var="region=${env.AWS_REGION}"
                        """
                    }
                }
            }
        }

        stage('Verify Resources') {
    steps {
        dir(env.TERRAFORM_DIR) {
            sh 'terraform state list'
            sh 'terraform show'
        }
    }
}

        stage('Fetch Public and Private IPs') {
    steps {
        withCredentials([
            [$class: 'AmazonWebServicesCredentialsBinding', 
             credentialsId: 'aws-creds-backup',
             accessKeyVariable: 'AWS_ACCESS_KEY_ID',
             secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
        ]) {
            dir(env.TERRAFORM_DIR) {
                script {
                    // Step 1: Initialize and refresh state (without auto-approve)
                    sh 'terraform init -input=false'  // Ensure working with latest state
                    sh 'terraform refresh -input=false'
                    
                    // Step 2: Try Terraform outputs first
                    echo "Attempting to fetch IPs from Terraform outputs..."
                    env.PUBLIC_IP = sh(
                        script: "terraform output -raw frontend_public_ip 2>/dev/null || echo 'NULL'",
                        returnStdout: true
                    ).trim()
                    
                    env.BACKEND_PRIVATE_IP = sh(
                        script: "terraform output -raw backend_private_ip 2>/dev/null || echo 'NULL'",
                        returnStdout: true
                    ).trim()

                    // Step 3: Fallback to AWS CLI if needed
                    if (env.PUBLIC_IP == "NULL" || env.BACKEND_PRIVATE_IP == "NULL") {
                        echo "Using AWS CLI fallback method..."
                        
                        // Get Frontend Public IP
                        env.PUBLIC_IP = sh(
                            script: """
                                aws ec2 describe-instances \
                                    --region ${env.AWS_REGION} \
                                    --filters 'Name=tag:Name,Values=frontend-server' 'Name=instance-state-name,Values=running' \
                                    --query 'Reservations[].Instances[].PublicIpAddress' \
                                    --output text | head -n 1 || echo 'NULL'
                            """,
                            returnStdout: true
                        ).trim()
                        
                        // Get Backend Private IP
                        env.BACKEND_PRIVATE_IP = sh(
                            script: """
                                aws ec2 describe-instances \
                                    --region ${env.AWS_REGION} \
                                    --filters 'Name=tag:Name,Values=backend-server' 'Name=instance-state-name,Values=running' \
                                    --query 'Reservations[].Instances[].PrivateIpAddress' \
                                    --output text | head -n 1 || echo 'NULL'
                            """,
                            returnStdout: true
                        ).trim()
                    }

                    // Step 4: Validate results
                    if (env.PUBLIC_IP == "NULL") {
                        error("Could not determine frontend public IP")
                    }
                    if (env.BACKEND_PRIVATE_IP == "NULL") {
                        error("Could not determine backend private IP")
                    }
                    
                    echo "âœ… Successfully fetched IP addresses:"
                    echo "Frontend Public IP: ${env.PUBLIC_IP}"
                    echo "Backend Private IP: ${env.BACKEND_PRIVATE_IP}"
                }
            }
        }
    }
}
        stage('Deploy Frontend & Configure Nginx Reverse Proxy') {
            steps {
                sshagent(['bastion-ssh-main.pem']) {
                    script {
                        writeFile file: 'nginx.conf', text: """
        server {
            listen 80;

            location / {
                root /var/www/html;
                index index.html;
            }

            location /project/ {
                proxy_pass http://${env.BACKEND_PRIVATE_IP}:9090/project/;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
            }
        }
                        """

                        sh """
                            echo "Copying index.html and nginx.conf to EC2..."
                            scp -o StrictHostKeyChecking=no index.html ubuntu@${env.PUBLIC_IP}:/tmp/index.html
                            scp -o StrictHostKeyChecking=no nginx.conf ubuntu@${env.PUBLIC_IP}:/tmp/nginx.conf

                            echo "Configuring Nginx on EC2..."
                            ssh -o StrictHostKeyChecking=no ubuntu@${env.PUBLIC_IP} '
                                sudo mv /tmp/index.html /var/www/html/index.html
                                sudo mv /tmp/nginx.conf /etc/nginx/sites-available/default
                                sudo nginx -t && sudo systemctl reload nginx
                            '
                        """
                    }
                }
            }
        }

        stage('Deploy Backend Container') {
            steps {
                sshagent(['bastion-ssh-main.pem']) {
                    withCredentials([[ 
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-creds-backup',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        script {
                            echo "Deploying Docker container on backend EC2 via bastion..."

                            sh """
                                ssh -o StrictHostKeyChecking=no ubuntu@${env.PUBLIC_IP} '
                                    ssh -o StrictHostKeyChecking=no ubuntu@${env.BACKEND_PRIVATE_IP} "
                                        sudo apt-get update -y;
                                        sudo apt-get install -y docker.io unzip;
                                        curl \\"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\\" -o \\"awscliv2.zip\\";
                                        unzip awscliv2.zip;
                                        sudo ./aws/install;
                                        sudo systemctl start docker;
                                        sudo systemctl enable docker;
                                        sudo usermod -aG docker ubuntu;
                                        sudo aws ecr get-login-password --region ${env.AWS_REGION} | sudo docker login --username AWS --password-stdin ${env.ECR_REPO_URI.split('/')[0]};
                                        sudo docker pull ${env.ECR_REPO_URI}:${BUILD_NUMBER};
                                        sudo docker stop springboot-app || true;
                                        sudo docker rm springboot-app || true;
                                        nohup sudo docker run -d -p 9090:8080 --name springboot-app ${env.ECR_REPO_URI}:${BUILD_NUMBER} > /var/log/springboot-app.log 2>&1 &
                                    "
                                '
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            node('aws-slave') {
                dir(env.TERRAFORM_DIR) {
                    sh 'terraform destroy -auto-approve || true'
                }
                cleanWs()
            }
        }
        always {
            cleanWs()
        }
    }
}
