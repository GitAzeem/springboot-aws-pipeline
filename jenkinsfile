pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
    }

    // Declare shared variables
    def FRONTEND_IP = ''
    def BACKEND_IP = ''
    def ECR_REPO = ''

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'github-cred', url: 'https://github.com/GitAzeem/springboot-aws-pipeline.git'
            }
        }

        stage('Build Spring Boot JAR') {
            steps {
                dir('journalapp') {
                    bat 'mvnw.cmd clean package -DskipTests'
                }
            }
        }

        stage('Provision Infrastructure with Terraform') {
            steps {
                dir('terraform') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-backup']]) {
                        withEnv([
                            "AWS_DEFAULT_REGION=${AWS_REGION}"
                        ]) {
                            bat 'terraform init'
                            bat 'terraform apply -auto-approve'

                            // Retrieve outputs once for reuse
                            FRONTEND_IP = bat(script: 'terraform output -raw frontend_public_ip', returnStdout: true).trim()
                            BACKEND_IP = bat(script: 'terraform output -raw backend_private_ip', returnStdout: true).trim()
                            ECR_REPO = bat(script: 'terraform output -raw ecr_repository_url', returnStdout: true).trim()

                            echo "Captured Outputs:"
                            echo "FRONTEND_IP=${FRONTEND_IP}"
                            echo "BACKEND_IP=${BACKEND_IP}"
                            echo "ECR_REPO=${ECR_REPO}"
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image to ECR') {
            steps {
                script {
                    bat """
                        docker build -t ${ECR_REPO}:${IMAGE_TAG} -f ./journalapp/Dockerfile ./journalapp
                    """
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-backup']]) {
                        withEnv(["AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                            bat """
                                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                                docker push ${ECR_REPO}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy Backend to Private EC2') {
            steps {
                sshagent(credentials: ['ec2-ssh']) {
                    bat """
                        pscp -i path\\to\\private-key.ppk -r journalapp ubuntu@${FRONTEND_IP}:/home/ubuntu/
                        plink -i path\\to\\private-key.ppk ubuntu@${FRONTEND_IP} "
                            ssh ubuntu@${BACKEND_IP} '
                                sudo apt update
                                sudo apt install -y docker.io awscli
                                aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REPO}
                                sudo docker pull ${ECR_REPO}:${IMAGE_TAG}
                                sudo docker stop backend || true
                                sudo docker rm backend || true
                                sudo docker run -d --name backend -p 9090:9090 ${ECR_REPO}:${IMAGE_TAG}
                            '
                        "
                    """
                }
            }
        }

        stage('Deploy Frontend to Public EC2') {
            steps {
                script {
                    bat """
                        powershell -Command "(Get-Content frontend\\index.html) -replace 'http://localhost:9090', 'http://${BACKEND_IP}:9090' | Set-Content frontend\\index.html"
                    """
                }
                sshagent(credentials: ['ec2-ssh']) {
                    bat """
                        pscp -i path\\to\\private-key.ppk frontend\\index.html ubuntu@${FRONTEND_IP}:/home/ubuntu/index.html
                        plink -i path\\to\\private-key.ppk ubuntu@${FRONTEND_IP} "
                            sudo apt update
                            sudo apt install -y nginx
                            sudo mv /home/ubuntu/index.html /var/www/html/index.html
                            sudo systemctl restart nginx
                        "
                    """
                }
            }
        }
    }
}
