pipeline {
    agent {
        label 'aws-slave'
    }

    tools {
        git 'linux-git'
    }

    environment {
        AWS_REGION = 'us-east-1'
        APP_DIR = 'journalapp'
        TERRAFORM_DIR = 'terraform'
        ECR_REPO_URI = '471112618663.dkr.ecr.us-east-1.amazonaws.com/springboot-app-repo'
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir(env.APP_DIR) {
                    sh 'chmod +x mvnw && ./mvnw clean package -DskipTests'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds-backup',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // 1. Login to ECR
                        sh """
                            aws ecr get-login-password --region ${env.AWS_REGION} | \
                            docker login --username AWS --password-stdin ${env.ECR_REPO_URI.split('/')[0]}
                        """
                        
                        // 2. Build with BuildKit (modern builder)
                        dir(env.APP_DIR) {
                            sh """
                                docker build \
                                    -t ${env.ECR_REPO_URI}:${BUILD_NUMBER} .
                            """
                        }
                        
                        // 3. Push the image
                        sh "docker push ${env.ECR_REPO_URI}:${BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds-backup',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    dir(env.TERRAFORM_DIR) {
                        sh 'terraform init -upgrade -input=false'
                        sh """
                            terraform apply -auto-approve \
                                -var="docker_image=${env.ECR_REPO_URI}:${BUILD_NUMBER}" \
                                -var="region=${env.AWS_REGION}"
                        """
                    }
                }
            }
        }

        stage('Fetch Public IP') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds-backup',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    dir(env.TERRAFORM_DIR) {
                        script {
                            PUBLIC_IP = sh(
                                script: "terraform output -raw frontend_public_ip",
                                returnStdout: true
                            ).trim()
                            echo "Fetched Public IP: ${PUBLIC_IP}"
                        }
                    }
                }
            }
        }

        stage('Deploy index.html to EC2') {
            steps {
                sshagent(['bastion-ssh-main.pem']) { // replace with your Jenkins SSH credential ID
                    sh """
                        echo "Copying index.html to EC2..."
                        scp -o StrictHostKeyChecking=no index.html ubuntu@${PUBLIC_IP}:/tmp/index.html

                        echo "Configuring Nginx on EC2..."
                        ssh -o StrictHostKeyChecking=no ubuntu@${PUBLIC_IP} '
                            sudo mv /tmp/index.html /var/www/html/index.html
                            sudo systemctl restart nginx
                        '
                    """
                }
            }
        }



    }

    post {
        failure {
            node('aws-slave') {
                dir(env.TERRAFORM_DIR) {
                    sh 'terraform destroy -auto-approve || true'
                }
                cleanWs()
            }
        }
        always {
            cleanWs()
        }
    }
}