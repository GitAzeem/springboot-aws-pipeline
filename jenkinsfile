pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'github-cred', url: 'https://github.com/GitAzeem/springboot-aws-pipeline.git'
            }
        }

        stage('Build Spring Boot JAR') {
            steps {
                dir('journalapp') {
                    bat 'mvnw.cmd clean package -DskipTests'
                }
            }
        }

        stage('Provision Infrastructure with Terraform') {
            steps {
                dir('terraform') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-backup']]) {
                        withEnv(["AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                            bat 'terraform init'
                            bat 'terraform apply -auto-approve'
                        }
                    }
                }
            }
        }

      stage('Build and Push Docker Image to ECR') {
    steps {
        script {
            // Get ECR repo URL with FULL credential specification
            def ECR_REPO = ''
            dir('terraform') {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds-backup',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                    tokenVariable: 'AWS_SESSION_TOKEN'
                ]]) {
                    withEnv([
                        "AWS_DEFAULT_REGION=${AWS_REGION}",
                        "AWS_REGION=${AWS_REGION}"
                    ]) {
                        // First refresh Terraform state
                        bat 'terraform refresh'
                        
                        // Then get output
                        ECR_REPO = bat(
                            script: 'terraform output -raw ecr_repository_url',
                            returnStdout: true
                        ).trim()
                    }
                }
            }

            echo "Confirmed ECR URL: ${ECR_REPO}"

            // Build and push with same credentials
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: 'aws-creds-backup'
            ]]) {
                bat """
                    docker build -t "${ECR_REPO}:${IMAGE_TAG}" -f ./journalapp/Dockerfile ./journalapp
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                    docker push "${ECR_REPO}:${IMAGE_TAG}"
                """
            }
        }
    }
}
        stage('Deploy Backend to Private EC2') {
            steps {
                script {
                    dir('terraform') {
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-backup']]) {
                            withEnv(["AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                                FRONTEND_IP = bat(script: 'terraform output -raw frontend_public_ip', returnStdout: true).trim()
                                BACKEND_IP = bat(script: 'terraform output -raw backend_private_ip', returnStdout: true).trim()
                                ECR_REPO = bat(script: 'terraform output -raw ecr_repository_url', returnStdout: true).trim()
                            }
                        }
                    }

                    sshagent(credentials: ['ec2-ssh']) {
                        bat """
                            pscp -i path\\to\\private-key.ppk -r journalapp ubuntu@${FRONTEND_IP}:/home/ubuntu/
                            plink -i path\\to\\private-key.ppk ubuntu@${FRONTEND_IP} "
                                ssh ubuntu@${BACKEND_IP} '
                                    sudo apt update
                                    sudo apt install -y docker.io awscli
                                    aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REPO}
                                    sudo docker pull ${ECR_REPO}:${IMAGE_TAG}
                                    sudo docker stop backend || true
                                    sudo docker rm backend || true
                                    sudo docker run -d --name backend -p 9090:9090 ${ECR_REPO}:${IMAGE_TAG}
                                '
                            "
                        """
                    }
                }
            }
        }

        stage('Deploy Frontend to Public EC2') {
            steps {
                script {
                    dir('terraform') {
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-backup']]) {
                            withEnv(["AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                                FRONTEND_IP = bat(script: 'terraform output -raw frontend_public_ip', returnStdout: true).trim()
                                BACKEND_IP = bat(script: 'terraform output -raw backend_private_ip', returnStdout: true).trim()
                            }
                        }
                    }

                    bat """
                        powershell -Command "(Get-Content frontend\\index.html) -replace 'http://localhost:9090', 'http://${BACKEND_IP}:9090' | Set-Content frontend\\index.html"
                    """

                    sshagent(credentials: ['ec2-ssh']) {
                        bat """
                            pscp -i path\\to\\private-key.ppk frontend\\index.html ubuntu@${FRONTEND_IP}:/home/ubuntu/index.html
                            plink -i path\\to\\private-key.ppk ubuntu@${FRONTEND_IP} "
                                sudo apt update
                                sudo apt install -y nginx
                                sudo mv /home/ubuntu/index.html /var/www/html/index.html
                                sudo systemctl restart nginx
                            "
                        """
                    }
                }
            }
        }
    }
}
