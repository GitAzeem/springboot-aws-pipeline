pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
    }

    stages {

        stage('Checkout Code') {
    steps {
        git branch: 'main', credentialsId: 'github-cred', url: 'https://github.com/GitAzeem/springboot-aws-pipeline.git'
    }
}


        stage('Build Spring Boot JAR') {
            steps {
                dir('journalapp') {
                    bat 'mvnw.cmd clean package -DskipTests'
                }
            }
        }

        stage('Provision Infrastructure with Terraform') {
            steps {
                dir('terraform') {
                    withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        bat """
                            set AWS_ACCESS_KEY_ID=%AWS_ACCESS_KEY_ID%
                            set AWS_SECRET_ACCESS_KEY=%AWS_SECRET_ACCESS_KEY%
                            set AWS_DEFAULT_REGION=%AWS_REGION%
                            terraform init
                            terraform apply -auto-approve
                        """
                    }
                }
            }
        }

        stage('Build and Push Docker Image to ECR') {
            steps {
                script {
                    dir('terraform') {
                        ECR_REPO = bat(script: 'terraform output -raw ecr_repository_url', returnStdout: true).trim()
                    }
                    dockerImage = docker.build("${ECR_REPO}:${IMAGE_TAG}", "-f Dockerfile ./journalapp")

                    withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        bat """
                            aws configure set aws_access_key_id %AWS_ACCESS_KEY_ID%
                            aws configure set aws_secret_access_key %AWS_SECRET_ACCESS_KEY%
                            aws configure set region ${AWS_REGION}

                            for /f %%i in ('aws ecr get-login-password --region ${AWS_REGION}') do docker login --username AWS --password %%i ${ECR_REPO}
                            docker push ${ECR_REPO}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy Backend to Private EC2') {
            steps {
                script {
                    dir('terraform') {
                        FRONTEND_IP = bat(script: 'terraform output -raw frontend_public_ip', returnStdout: true).trim()
                        BACKEND_IP = bat(script: 'terraform output -raw backend_private_ip', returnStdout: true).trim()
                        ECR_REPO = bat(script: 'terraform output -raw ecr_repository_url', returnStdout: true).trim()
                    }
                }

                sshagent(credentials: ['ec2-ssh']) {
                    bat """
                        pscp -i path\\to\\private-key.ppk -r journalapp ubuntu@${FRONTEND_IP}:/home/ubuntu/
                        plink -i path\\to\\private-key.ppk ubuntu@${FRONTEND_IP} "
                            ssh ubuntu@${BACKEND_IP} '
                                sudo apt update
                                sudo apt install -y docker.io awscli
                                aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REPO}
                                sudo docker pull ${ECR_REPO}:${IMAGE_TAG}
                                sudo docker stop backend || true
                                sudo docker rm backend || true
                                sudo docker run -d --name backend -p 9090:9090 ${ECR_REPO}:${IMAGE_TAG}
                            '
                        "
                    """
                }
            }
        }

        stage('Deploy Frontend to Public EC2') {
            steps {
                script {
                    dir('terraform') {
                        FRONTEND_IP = bat(script: 'terraform output -raw frontend_public_ip', returnStdout: true).trim()
                        BACKEND_IP = bat(script: 'terraform output -raw backend_private_ip', returnStdout: true).trim()
                    }

                    bat """
                        powershell -Command "(Get-Content frontend\\index.html) -replace 'http://localhost:9090', 'http://${BACKEND_IP}:9090' | Set-Content frontend\\index.html"
                    """
                }

                sshagent(credentials: ['ec2-ssh']) {
                    bat """
                        pscp -i path\\to\\private-key.ppk frontend\\index.html ubuntu@${FRONTEND_IP}:/home/ubuntu/index.html
                        plink -i path\\to\\private-key.ppk ubuntu@${FRONTEND_IP} "
                            sudo apt update
                            sudo apt install -y nginx
                            sudo mv /home/ubuntu/index.html /var/www/html/index.html
                            sudo systemctl restart nginx
                        "
                    """
                }
            }
        }
    }
}
