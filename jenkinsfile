pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'github-cred', url: 'https://github.com/GitAzeem/springboot-aws-pipeline.git'
            }
        }

        stage('Build Spring Boot JAR') {
            steps {
                dir('journalapp') {
                    bat 'mvnw.cmd clean package -DskipTests'
                }
            }
        }

        stage('Provision Infrastructure with Terraform') {
            steps {
                dir('terraform') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-backup']]) {
                        withEnv(["AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                            bat 'terraform init'
                            bat 'terraform apply -auto-approve'
                        }
                    }
                }
            }
        }

      stage('Build and Push Docker Image to ECR') {
    steps {
        script {
            // 1. First get the ECR repository URL with proper credentials
            def ECR_REPO = ''
            dir('terraform') {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds-backup',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    withEnv([
                        "AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}",
                        "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}",
                        "AWS_DEFAULT_REGION=${AWS_REGION}"
                    ]) {
                        // Refresh Terraform state to ensure it's current
                        bat 'terraform refresh'
                        
                        // Get just the repository URL
                        ECR_REPO = bat(
                            script: 'terraform output -raw ecr_repository_url',
                            returnStdout: true
                        ).trim()
                        
                        // Clean any command artifacts from output
                        ECR_REPO = ECR_REPO.readLines().last()
                    }
                }
            }

            echo "Using ECR Repository: ${ECR_REPO}"
            
            // 2. Build and push Docker image with same credentials
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: 'aws-creds-backup'
            ]]) {
                bat """
                    docker build -t "${ECR_REPO}:${IMAGE_TAG}" -f ./journalapp/Dockerfile ./journalapp
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                    docker push "${ECR_REPO}:${IMAGE_TAG}"
                """
            }
        }
    }
}
       stage('Deploy Backend to Private EC2') {
    steps {
        script {
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: 'aws-creds-backup',
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                withEnv(["AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                    // Get outputs from Terraform using bat
                    def FRONTEND_IP = bat(
                        script: 'cd terraform && terraform output -raw frontend_public_ip',
                        returnStdout: true
                    ).trim()
                    
                    def BACKEND_IP = bat(
                        script: 'cd terraform && terraform output -raw backend_private_ip',
                        returnStdout: true
                    ).trim()
                    
                    def ECR_REPO = bat(
                        script: 'cd terraform && terraform output -raw ecr_repository_url',
                        returnStdout: true
                    ).trim()

                    echo "Frontend IP: ${FRONTEND_IP}"
                    echo "Backend IP: ${BACKEND_IP}"
                    echo "ECR Repo: ${ECR_REPO}"

                    // Using AWS SSM as the primary method since SSH is problematic on Windows
                    def instanceId = bat(
                        script: """
                            aws ec2 describe-instances \
                                --filters "Name=private-ip-address,Values=${BACKEND_IP}" \
                                --query "Reservations[0].Instances[0].InstanceId" \
                                --output text
                        """,
                        returnStdout: true
                    ).trim()
                    
                    bat """
                        aws ssm send-command \
                            --instance-ids ${instanceId} \
                            --document-name "AWS-RunShellScript" \
                            --parameters '{
                                "commands":[
                                    "sudo apt update -y",
                                    "sudo apt install -y docker.io awscli",
                                    "aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REPO}",
                                    "sudo docker stop backend || true",
                                    "sudo docker rm backend || true",
                                    "sudo docker run -d --name backend -p 9090:9090 ${ECR_REPO}:${IMAGE_TAG}"
                                ]
                            }' \
                            --region ${AWS_REGION}
                    """
                }
            }
        }
    }
}
        stage('Deploy Frontend to Public EC2') {
            steps {
                script {
                    dir('terraform') {
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-backup']]) {
                            withEnv(["AWS_DEFAULT_REGION=${AWS_REGION}"]) {
                                FRONTEND_IP = bat(script: 'terraform output -raw frontend_public_ip', returnStdout: true).trim()
                                BACKEND_IP = bat(script: 'terraform output -raw backend_private_ip', returnStdout: true).trim()
                            }
                        }
                    }

                    bat """
                        powershell -Command "(Get-Content frontend\\index.html) -replace 'http://localhost:9090', 'http://${BACKEND_IP}:9090' | Set-Content frontend\\index.html"
                    """

                    sshagent(credentials: ['ec2-ssh']) {
                        bat """
                            pscp -i path\\to\\private-key.ppk frontend\\index.html ubuntu@${FRONTEND_IP}:/home/ubuntu/index.html
                            plink -i path\\to\\private-key.ppk ubuntu@${FRONTEND_IP} "
                                sudo apt update
                                sudo apt install -y nginx
                                sudo mv /home/ubuntu/index.html /var/www/html/index.html
                                sudo systemctl restart nginx
                            "
                        """
                    }
                }
            }
        }
    }
}
