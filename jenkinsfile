pipeline {
    agent {
        label 'aws-slave'
    }

    // Explicitly define tools (critical fix for git errors)
    tools {
    git 'linux-git'  // Must match the name in Jenkins
}

    environment {
        AWS_REGION = 'us-east-1'
        APP_DIR = 'journalapp'
        TERRAFORM_DIR = 'terraform'
        ECR_REPO_URI = '471112618663.dkr.ecr.us-east-1.amazonaws.com/springboot-app-repo'
        
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/GitAzeem/springboot-aws-pipeline.git',
                        credentialsId: 'github-cred'
                    ]]
                ])
            }
        }
        stage('Build Application') {
    steps {
        dir(env.APP_DIR) {
            sh '''
                chmod +x mvnw     # Ensure executable permissions
                ./mvnw clean package -DskipTests
            '''
        }
    }
}

        stage('Docker Build & Push') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Login to ECR (using AWS CLI v2)
                        sh """
                            aws ecr get-login-password --region ${env.AWS_REGION} | \
                            docker login --username AWS --password-stdin ${env.ECR_REPO_URI.split('/')[0]}
                        """
                        // Build and push
                        dir(env.APP_DIR) {
                            sh "docker build -t ${env.DOCKER_IMAGE} ."
                            sh "docker push ${env.DOCKER_IMAGE}"
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir(env.TERRAFORM_DIR) {
                    sh 'terraform init -upgrade'
                    sh """
                        terraform apply -auto-approve \
                            -var="docker_image=${env.DOCKER_IMAGE}" \
                            -var="region=${env.AWS_REGION}"
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    def frontend_ip = sh(
                        script: 'terraform output -raw frontend_public_ip',
                        dir: env.TERRAFORM_DIR,
                        returnStdout: true
                    ).trim()
                    
                    // Test frontend
                    sh "curl -sSf http://${frontend_ip} --retry 3 --max-time 5"
                    
                    // Test backend through frontend (SSH tunnel)
                    sh """
                        ssh -o StrictHostKeyChecking=no -i /path/to/main.pem ubuntu@${frontend_ip} \
                        "curl -sSf http://localhost:9090/health"
                    """
                }
            }
        }
    }

    post {
        always {
            node('aws-slave') {
                deleteDir()  // More thorough than cleanWs
            }
        }
    }
}