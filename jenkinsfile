pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git credentialsId: 'github-cred', url: 'https://github.com/GitAzeem/springboot-aws-pipeline.git'
            }
        }

        stage('Build Spring Boot JAR') {
            steps {
                dir('journalapp') {
                    sh './mvnw clean package -DskipTests'
                }
            }
        }

        stage('Provision Infrastructure with Terraform') {
            steps {
                dir('terraform') {
                    withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                            export AWS_DEFAULT_REGION=${AWS_REGION}

                            terraform init
                            terraform apply -auto-approve
                        '''
                    }
                }
            }
        }

        stage('Build and Push Docker Image to ECR') {
            steps {
                script {
                    dir('terraform') {
                        ECR_REPO = sh(script: "terraform output -raw ecr_repository_url", returnStdout: true).trim()
                    }
                    dockerImage = docker.build("${ECR_REPO}:${IMAGE_TAG}", "-f Dockerfile ./journalapp")

                    withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set default.region ${AWS_REGION}

                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                            docker push ${ECR_REPO}:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }

        stage('Deploy Backend to Private EC2') {
            steps {
                script {
                    dir('terraform') {
                        FRONTEND_IP = sh(script: "terraform output -raw frontend_public_ip", returnStdout: true).trim()
                        BACKEND_IP = sh(script: "terraform output -raw backend_private_ip", returnStdout: true).trim()
                        ECR_REPO = sh(script: "terraform output -raw ecr_repository_url", returnStdout: true).trim()
                    }
                }

                sshagent(credentials: ['ec2-ssh']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${FRONTEND_IP} '
                            ssh -o StrictHostKeyChecking=no ubuntu@${BACKEND_IP} "
                                sudo apt update
                                sudo apt install -y docker.io awscli
                                aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REPO}
                                sudo docker pull ${ECR_REPO}:${IMAGE_TAG}
                                sudo docker stop backend || true
                                sudo docker rm backend || true
                                sudo docker run -d --name backend -p 9090:9090 ${ECR_REPO}:${IMAGE_TAG}
                            "
                        '
                    """
                }
            }
        }

        stage('Deploy Frontend to Public EC2') {
            steps {
                script {
                    dir('terraform') {
                        FRONTEND_IP = sh(script: "terraform output -raw frontend_public_ip", returnStdout: true).trim()
                        BACKEND_IP = sh(script: "terraform output -raw backend_private_ip", returnStdout: true).trim()
                    }
                    // Replace localhost:9090 with backend private IP in index.html
                    sh """
                        sed -i 's|http://localhost:9090|http://${BACKEND_IP}:9090|g' frontend/index.html
                    """
                }

                sshagent(credentials: ['ec2-ssh']) {
                    sh """
                        scp -o StrictHostKeyChecking=no frontend/index.html ubuntu@${FRONTEND_IP}:/home/ubuntu/index.html
                        ssh -o StrictHostKeyChecking=no ubuntu@${FRONTEND_IP} '
                            sudo apt update
                            sudo apt install -y nginx
                            sudo mv /home/ubuntu/index.html /var/www/html/index.html
                            sudo systemctl restart nginx
                        '
                    """
                }
            }
        }
    }
}
